<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans" xmlns:context="http://www.springframework.org/schema/context"
 xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:security="http://www.springframework.org/schema/security"
 xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd
  http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-3.2.xsd
  http://www.springframework.org/schema/security http://www.springframework.org/schema/security/spring-security-3.2.xsd">

<!-- <context:component-scan base-package="it.ltc.logica.controller.login" /> -->
 <!-- To allow public access by default and to set authentication mode to basic login/password -->
 <security:http create-session="stateless" use-expressions="true">
  <!-- security:anonymous enabled="true" / -->
  <security:intercept-url pattern="/rest/**" access="hasRole('ROLE_USER')"/>
  <security:http-basic />
 </security:http>

 <!-- To delegate authorization to method calls rather than to urls -->
 <!-- (Thus, we don't need to set any url-interceptor in this conf) -->
 <!-- security:global-method-security pre-post-annotations="enabled" / -->
 
 <!-- To create user/password with roles -->
<!--  <security:authentication-manager alias="authenticationManager"> -->
<!--   <security:authentication-provider> -->
<!--    <security:user-service> -->
<!--     <security:user authorities="ROLE_USER" name="user1" password="password1" /> -->
<!--    </security:user-service> -->
<!--   </security:authentication-provider> -->
<!--  </security:authentication-manager>   -->

<security:authentication-manager>
 <security:authentication-provider ref="CustomAuthenticationProvider"/>
 </security:authentication-manager>

<!-- <bean id="CustomAuthenticationProvider" class="it.ltc.services.clienti.controller.custom.CustomAuthenticationProvider" /> -->
<bean id="CustomAuthenticationProvider" class="it.ltc.services.custom.authentication.CustomAuthenticationProvider" />

</beans>